// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package dto

import (
	"exaroton-wa-bot/internal/dto"
	"time"

	"github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// NewMockWebSession creates a new instance of MockWebSession. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWebSession(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWebSession {
	mock := &MockWebSession{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWebSession is an autogenerated mock type for the WebSession type
type MockWebSession struct {
	mock.Mock
}

type MockWebSession_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWebSession) EXPECT() *MockWebSession_Expecter {
	return &MockWebSession_Expecter{mock: &_m.Mock}
}

// GetUser provides a mock function for the type MockWebSession
func (_mock *MockWebSession) GetUser(c echo.Context) (*dto.UserClaims, error) {
	ret := _mock.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *dto.UserClaims
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(echo.Context) (*dto.UserClaims, error)); ok {
		return returnFunc(c)
	}
	if returnFunc, ok := ret.Get(0).(func(echo.Context) *dto.UserClaims); ok {
		r0 = returnFunc(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserClaims)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = returnFunc(c)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWebSession_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockWebSession_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - c
func (_e *MockWebSession_Expecter) GetUser(c interface{}) *MockWebSession_GetUser_Call {
	return &MockWebSession_GetUser_Call{Call: _e.mock.On("GetUser", c)}
}

func (_c *MockWebSession_GetUser_Call) Run(run func(c echo.Context)) *MockWebSession_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context))
	})
	return _c
}

func (_c *MockWebSession_GetUser_Call) Return(userClaims *dto.UserClaims, err error) *MockWebSession_GetUser_Call {
	_c.Call.Return(userClaims, err)
	return _c
}

func (_c *MockWebSession_GetUser_Call) RunAndReturn(run func(c echo.Context) (*dto.UserClaims, error)) *MockWebSession_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// SetUser provides a mock function for the type MockWebSession
func (_mock *MockWebSession) SetUser(c echo.Context, user *dto.UserClaims, expDuration time.Duration) error {
	ret := _mock.Called(c, user, expDuration)

	if len(ret) == 0 {
		panic("no return value specified for SetUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(echo.Context, *dto.UserClaims, time.Duration) error); ok {
		r0 = returnFunc(c, user, expDuration)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWebSession_SetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUser'
type MockWebSession_SetUser_Call struct {
	*mock.Call
}

// SetUser is a helper method to define mock.On call
//   - c
//   - user
//   - expDuration
func (_e *MockWebSession_Expecter) SetUser(c interface{}, user interface{}, expDuration interface{}) *MockWebSession_SetUser_Call {
	return &MockWebSession_SetUser_Call{Call: _e.mock.On("SetUser", c, user, expDuration)}
}

func (_c *MockWebSession_SetUser_Call) Run(run func(c echo.Context, user *dto.UserClaims, expDuration time.Duration)) *MockWebSession_SetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(echo.Context), args[1].(*dto.UserClaims), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockWebSession_SetUser_Call) Return(err error) *MockWebSession_SetUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWebSession_SetUser_Call) RunAndReturn(run func(c echo.Context, user *dto.UserClaims, expDuration time.Duration) error) *MockWebSession_SetUser_Call {
	_c.Call.Return(run)
	return _c
}
