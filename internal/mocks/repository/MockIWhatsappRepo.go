// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"go.mau.fi/whatsmeow"
)

// NewMockIWhatsappRepo creates a new instance of MockIWhatsappRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIWhatsappRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIWhatsappRepo {
	mock := &MockIWhatsappRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIWhatsappRepo is an autogenerated mock type for the IWhatsappRepo type
type MockIWhatsappRepo struct {
	mock.Mock
}

type MockIWhatsappRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIWhatsappRepo) EXPECT() *MockIWhatsappRepo_Expecter {
	return &MockIWhatsappRepo_Expecter{mock: &_m.Mock}
}

// Disconnect provides a mock function for the type MockIWhatsappRepo
func (_mock *MockIWhatsappRepo) Disconnect() {
	_mock.Called()
	return
}

// MockIWhatsappRepo_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type MockIWhatsappRepo_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
func (_e *MockIWhatsappRepo_Expecter) Disconnect() *MockIWhatsappRepo_Disconnect_Call {
	return &MockIWhatsappRepo_Disconnect_Call{Call: _e.mock.On("Disconnect")}
}

func (_c *MockIWhatsappRepo_Disconnect_Call) Run(run func()) *MockIWhatsappRepo_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIWhatsappRepo_Disconnect_Call) Return() *MockIWhatsappRepo_Disconnect_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIWhatsappRepo_Disconnect_Call) RunAndReturn(run func()) *MockIWhatsappRepo_Disconnect_Call {
	_c.Run(run)
	return _c
}

// IsLoggedIn provides a mock function for the type MockIWhatsappRepo
func (_mock *MockIWhatsappRepo) IsLoggedIn() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsLoggedIn")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockIWhatsappRepo_IsLoggedIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLoggedIn'
type MockIWhatsappRepo_IsLoggedIn_Call struct {
	*mock.Call
}

// IsLoggedIn is a helper method to define mock.On call
func (_e *MockIWhatsappRepo_Expecter) IsLoggedIn() *MockIWhatsappRepo_IsLoggedIn_Call {
	return &MockIWhatsappRepo_IsLoggedIn_Call{Call: _e.mock.On("IsLoggedIn")}
}

func (_c *MockIWhatsappRepo_IsLoggedIn_Call) Run(run func()) *MockIWhatsappRepo_IsLoggedIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIWhatsappRepo_IsLoggedIn_Call) Return(b bool) *MockIWhatsappRepo_IsLoggedIn_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockIWhatsappRepo_IsLoggedIn_Call) RunAndReturn(run func() bool) *MockIWhatsappRepo_IsLoggedIn_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type MockIWhatsappRepo
func (_mock *MockIWhatsappRepo) Login(ctx context.Context) (<-chan whatsmeow.QRChannelItem, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 <-chan whatsmeow.QRChannelItem
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (<-chan whatsmeow.QRChannelItem, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) <-chan whatsmeow.QRChannelItem); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan whatsmeow.QRChannelItem)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIWhatsappRepo_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockIWhatsappRepo_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx
func (_e *MockIWhatsappRepo_Expecter) Login(ctx interface{}) *MockIWhatsappRepo_Login_Call {
	return &MockIWhatsappRepo_Login_Call{Call: _e.mock.On("Login", ctx)}
}

func (_c *MockIWhatsappRepo_Login_Call) Run(run func(ctx context.Context)) *MockIWhatsappRepo_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIWhatsappRepo_Login_Call) Return(qRChannelItemCh <-chan whatsmeow.QRChannelItem, err error) *MockIWhatsappRepo_Login_Call {
	_c.Call.Return(qRChannelItemCh, err)
	return _c
}

func (_c *MockIWhatsappRepo_Login_Call) RunAndReturn(run func(ctx context.Context) (<-chan whatsmeow.QRChannelItem, error)) *MockIWhatsappRepo_Login_Call {
	_c.Call.Return(run)
	return _c
}
