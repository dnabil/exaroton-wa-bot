// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"
	"exaroton-wa-bot/internal/dto"
	"time"

	mock "github.com/stretchr/testify/mock"
	"go.mau.fi/whatsmeow"
)

// NewMockIAuthService creates a new instance of MockIAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAuthService {
	mock := &MockIAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIAuthService is an autogenerated mock type for the IAuthService type
type MockIAuthService struct {
	mock.Mock
}

type MockIAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAuthService) EXPECT() *MockIAuthService_Expecter {
	return &MockIAuthService_Expecter{mock: &_m.Mock}
}

// Login provides a mock function for the type MockIAuthService
func (_mock *MockIAuthService) Login(ctx context.Context, req *dto.UserLoginReq) (*dto.UserClaims, time.Duration, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *dto.UserClaims
	var r1 time.Duration
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.UserLoginReq) (*dto.UserClaims, time.Duration, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dto.UserLoginReq) *dto.UserClaims); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserClaims)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *dto.UserLoginReq) time.Duration); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Get(1).(time.Duration)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *dto.UserLoginReq) error); ok {
		r2 = returnFunc(ctx, req)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockIAuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockIAuthService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx
//   - req
func (_e *MockIAuthService_Expecter) Login(ctx interface{}, req interface{}) *MockIAuthService_Login_Call {
	return &MockIAuthService_Login_Call{Call: _e.mock.On("Login", ctx, req)}
}

func (_c *MockIAuthService_Login_Call) Run(run func(ctx context.Context, req *dto.UserLoginReq)) *MockIAuthService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dto.UserLoginReq))
	})
	return _c
}

func (_c *MockIAuthService_Login_Call) Return(userClaims *dto.UserClaims, duration time.Duration, err error) *MockIAuthService_Login_Call {
	_c.Call.Return(userClaims, duration, err)
	return _c
}

func (_c *MockIAuthService_Login_Call) RunAndReturn(run func(ctx context.Context, req *dto.UserLoginReq) (*dto.UserClaims, time.Duration, error)) *MockIAuthService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// WhatsappIsLoggedIn provides a mock function for the type MockIAuthService
func (_mock *MockIAuthService) WhatsappIsLoggedIn(ctx context.Context) bool {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WhatsappIsLoggedIn")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockIAuthService_WhatsappIsLoggedIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhatsappIsLoggedIn'
type MockIAuthService_WhatsappIsLoggedIn_Call struct {
	*mock.Call
}

// WhatsappIsLoggedIn is a helper method to define mock.On call
//   - ctx
func (_e *MockIAuthService_Expecter) WhatsappIsLoggedIn(ctx interface{}) *MockIAuthService_WhatsappIsLoggedIn_Call {
	return &MockIAuthService_WhatsappIsLoggedIn_Call{Call: _e.mock.On("WhatsappIsLoggedIn", ctx)}
}

func (_c *MockIAuthService_WhatsappIsLoggedIn_Call) Run(run func(ctx context.Context)) *MockIAuthService_WhatsappIsLoggedIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIAuthService_WhatsappIsLoggedIn_Call) Return(b bool) *MockIAuthService_WhatsappIsLoggedIn_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockIAuthService_WhatsappIsLoggedIn_Call) RunAndReturn(run func(ctx context.Context) bool) *MockIAuthService_WhatsappIsLoggedIn_Call {
	_c.Call.Return(run)
	return _c
}

// WhatsappLogin provides a mock function for the type MockIAuthService
func (_mock *MockIAuthService) WhatsappLogin(ctx context.Context) (<-chan whatsmeow.QRChannelItem, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WhatsappLogin")
	}

	var r0 <-chan whatsmeow.QRChannelItem
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (<-chan whatsmeow.QRChannelItem, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) <-chan whatsmeow.QRChannelItem); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan whatsmeow.QRChannelItem)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIAuthService_WhatsappLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WhatsappLogin'
type MockIAuthService_WhatsappLogin_Call struct {
	*mock.Call
}

// WhatsappLogin is a helper method to define mock.On call
//   - ctx
func (_e *MockIAuthService_Expecter) WhatsappLogin(ctx interface{}) *MockIAuthService_WhatsappLogin_Call {
	return &MockIAuthService_WhatsappLogin_Call{Call: _e.mock.On("WhatsappLogin", ctx)}
}

func (_c *MockIAuthService_WhatsappLogin_Call) Run(run func(ctx context.Context)) *MockIAuthService_WhatsappLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIAuthService_WhatsappLogin_Call) Return(qRChannelItemCh <-chan whatsmeow.QRChannelItem, err error) *MockIAuthService_WhatsappLogin_Call {
	_c.Call.Return(qRChannelItemCh, err)
	return _c
}

func (_c *MockIAuthService_WhatsappLogin_Call) RunAndReturn(run func(ctx context.Context) (<-chan whatsmeow.QRChannelItem, error)) *MockIAuthService_WhatsappLogin_Call {
	_c.Call.Return(run)
	return _c
}
